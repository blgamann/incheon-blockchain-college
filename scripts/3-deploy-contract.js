require("dotenv").config();
const ethers = require("ethers");
const abiCoder = new ethers.utils.AbiCoder();

const provider = new ethers.providers.JsonRpcProvider(
  "https://eth-sepolia.g.alchemy.com/v2/" + process.env.ALCHEMY_API_KEY
);

const privateKey = process.env.PRIVATE_KEY;
const wallet = new ethers.Wallet(privateKey, provider);

async function deployContract() {
  try {
    const gasPrice = await provider.getGasPrice();
    const nonce = await provider.getTransactionCount(wallet.address);

    const tx = {
      to: null, // contract creation
      value: 0,
      gasPrice: gasPrice,
      nonce: nonce,
    };

    const bytecode =
      "0x608060405234801561001057600080fd5b506040516106d43803806106d4833981810160405281019061003291906100be565b8060008190555080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550506100eb565b600080fd5b6000819050919050565b61009b81610088565b81146100a657600080fd5b50565b6000815190506100b881610092565b92915050565b6000602082840312156100d4576100d3610083565b5b60006100e2848285016100a9565b91505092915050565b6105da806100fa6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806318160ddd1461004657806370a0823114610064578063a9059cbb14610094575b600080fd5b61004e6100c4565b60405161005b91906102d7565b60405180910390f35b61007e60048036038101906100799190610355565b6100cd565b60405161008b91906102d7565b60405180910390f35b6100ae60048036038101906100a991906103ae565b610116565b6040516100bb9190610409565b60405180910390f35b60008054905090565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610186576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017d90610481565b60405180910390fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610208576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ff906104ed565b60405180910390fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610257919061053c565b9250508190555081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102ad9190610570565b925050819055506001905092915050565b6000819050919050565b6102d1816102be565b82525050565b60006020820190506102ec60008301846102c8565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610322826102f7565b9050919050565b61033281610317565b811461033d57600080fd5b50565b60008135905061034f81610329565b92915050565b60006020828403121561036b5761036a6102f2565b5b600061037984828501610340565b91505092915050565b61038b816102be565b811461039657600080fd5b50565b6000813590506103a881610382565b92915050565b600080604083850312156103c5576103c46102f2565b5b60006103d385828601610340565b92505060206103e485828601610399565b9150509250929050565b60008115159050919050565b610403816103ee565b82525050565b600060208201905061041e60008301846103fa565b92915050565b600082825260208201905092915050565b7f496e76616c696420726563697069656e74000000000000000000000000000000600082015250565b600061046b601183610424565b915061047682610435565b602082019050919050565b6000602082019050818103600083015261049a8161045e565b9050919050565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b60006104d7601483610424565b91506104e2826104a1565b602082019050919050565b60006020820190508181036000830152610506816104ca565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610547826102be565b9150610552836102be565b925082820390508181111561056a5761056961050d565b5b92915050565b600061057b826102be565b9150610586836102be565b925082820190508082111561059e5761059d61050d565b5b9291505056fea2646970667358221220b7a37e733c5b3b0e1098bdf9a00e24e4d6df33a5a2f29e8d8525bda8558a467a64736f6c63430008110033";
    const initialSupply = ethers.utils.parseUnits("1000", 18); // initialSupply = 1000 tokens
    const params = abiCoder.encode(["uint256"], [initialSupply]);
    tx.data = bytecode + params.slice(2); // remove the '0x' prefix

    const estimatedGas = await provider.estimateGas(tx);
    tx.gasLimit = estimatedGas;

    const signedTx = await wallet.signTransaction(tx);
    const txResponse = await provider.sendTransaction(signedTx);
    console.log("Transaction sent:", txResponse.hash);

    const receipt = await txResponse.wait();
    console.log("Transaction confirmed in block:", receipt.blockNumber);
    console.log("Contract deployed at:", receipt.contractAddress);
  } catch (error) {
    console.error("Error:", error);
  }
}

deployContract();
